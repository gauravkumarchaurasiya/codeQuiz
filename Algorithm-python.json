
 [
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)\n\nprint(factorial(5))",
    "output": "120",
    "description": "The code snippet defines a recursive function 'factorial' that calculates the factorial of a given number 'n'. When 'n' is 0, the function returns 1 (base case). Otherwise, it multiplies 'n' with the factorial of 'n-1' and returns the result. Calling 'factorial(5)' will calculate the factorial of 5, which is 120.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def binary_search(arr, target):\n low = 0\n high = len(arr) - 1\n\n while low <= high:\n mid = (low + high) // 2\n\n if arr[mid] == target:\n return mid\n elif arr[mid] < target:\n low = mid + 1\n else:\n high = mid - 1\n\n return -1\n\narr = [1, 3, 5, 7, 9]\ntarget = 5\nprint(binary_search(arr, target))",
    "output": "2",
    "description": "The code snippet defines a binary search function 'binary_search' that searches for a target element in a sorted array. The function initializes two pointers, 'low' and 'high', to the start and end indices of the array respectively. It iteratively divides the search space in half by comparing the middle element with the target. If the middle element matches the target, the function returns its index. If the middle element is smaller than the target, the 'low' pointer is updated to the next element. If the middle element is larger than the target, the 'high' pointer is updated to the previous element. The process continues until the target is found or the search space is exhausted. Calling 'binary_search(arr, target)' will search for the target element 5 in the array [1, 3, 5, 7, 9] and return its index, which is 2.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def bubble_sort(arr):\n n = len(arr)\n\n for i in range(n):\n for j in range(0, n-i-1):\n if arr[j] > arr[j+1]:\n arr[j], arr[j+1] = arr[j+1], arr[j]\n\n return arr\n\narr = [4, 2, 7, 1, 5]\nprint(bubble_sort(arr))",
    "output": "[1, 2, 4, 5, 7]",
    "description": "The code snippet defines a bubble sort function 'bubble_sort' that sorts an array in ascending order. The function iterates over the array multiple times, comparing adjacent elements and swapping them if they are in the wrong order. This process continues until the array is fully sorted. Calling 'bubble_sort(arr)' will sort the array [4, 2, 7, 1, 5] using the bubble sort algorithm and return the sorted array [1, 2, 4, 5, 7].",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def linear_search(arr, target):\n n = len(arr)\n\n for i in range(n):\n if arr[i] == target:\n return i\n\n return -1\n\narr = [3, 5, 2, 8, 4]\ntarget = 8\nprint(linear_search(arr, target))",
    "output": "3",
    "description": "The code snippet defines a linear search function 'linear_search' that searches for a target element in an array. The function iterates over each element of the array and checks if it matches the target. If a match is found, the function returns the index of the element. If no match is found, the function returns -1. Calling 'linear_search(arr, target)' will search for the target element 8 in the array [3, 5, 2, 8, 4] and return its index, which is 3.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def selection_sort(arr):\n n = len(arr)\n\n for i in range(n):\n min_index = i\n for j in range(i+1, n):\n if arr[j] < arr[min_index]:\n min_index = j\n\n arr[i], arr[min_index] = arr[min_index], arr[i]\n\n return arr\n\narr = [5, 2, 1, 8, 4]\nprint(selection_sort(arr))",
    "output": "[1, 2, 4, 5, 8]",
    "description": "The code snippet defines a selection sort function 'selection_sort' that sorts an array in ascending order. The function iterates over the array and finds the minimum element in the remaining unsorted portion of the array. It then swaps the minimum element with the first unsorted element. This process continues until the entire array is sorted. Calling 'selection_sort(arr)' will sort the array [5, 2, 1, 8, 4] using the selection sort algorithm and return the sorted array [1, 2, 4, 5, 8].",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def merge_sort(arr):\n if len(arr) <= 1:\n return arr\n\n mid = len(arr) // 2\n left = merge_sort(arr[:mid])\n right = merge_sort(arr[mid:])\n\n return merge(left, right)\n\n\ndef merge(left, right):\n result = []\n i = j = 0\n\n while i < len(left) and j < len(right):\n if left[i] < right[j]:\n result.append(left[i])\n i += 1\n else:\n result.append(right[j])\n j += 1\n\n result.extend(left[i:])\n result.extend(right[j:])\n\n return result\n\narr = [7, 2, 4, 1, 5]\nprint(merge_sort(arr))",
    "output": "[1, 2, 4, 5, 7]",
    "description": "The code snippet defines a merge sort function 'merge_sort' that sorts an array in ascending order. The function uses the divide and conquer approach by recursively dividing the array into smaller subarrays until each subarray has only one element. Then, it merges the subarrays in a sorted manner using the 'merge' function. Calling 'merge_sort(arr)' will sort the array [7, 2, 4, 1, 5] using the merge sort algorithm and return the sorted array [1, 2, 4, 5, 7].",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def insertion_sort(arr):\n n = len(arr)\n\n for i in range(1, n):\n key = arr[i]\n j = i - 1\n\n while j >= 0 and arr[j] > key:\n arr[j+1] = arr[j]\n j -= 1\n\n arr[j+1] = key\n\n return arr\n\narr = [3, 1, 5, 2, 4]\nprint(insertion_sort(arr))",
    "output": "[1, 2, 3, 4, 5]",
    "description": "The code snippet defines an insertion sort function 'insertion_sort' that sorts an array in ascending order. The function divides the array into a sorted and an unsorted part. It iteratively takes one element from the unsorted part and inserts it into its correct position in the sorted part. This process continues until the entire array is sorted. Calling 'insertion_sort(arr)' will sort the array [3, 1, 5, 2, 4] using the insertion sort algorithm and return the sorted array [1, 2, 3, 4, 5].",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def quick_sort(arr):\n if len(arr) <= 1:\n return arr\n\n pivot = arr[len(arr) // 2]\n left = [x for x in arr if x < pivot]\n middle = [x for x in arr if x == pivot]\n right = [x for x in arr if x > pivot]\n\n return quick_sort(left) + middle + quick_sort(right)\n\narr = [4, 2, 6, 1, 3]\nprint(quick_sort(arr))",
    "output": "[1, 2, 3, 4, 6]",
    "description": "The code snippet defines a quick sort function 'quick_sort' that sorts an array in ascending order. The function selects a pivot element and divides the array into three parts: elements smaller than the pivot, elements equal to the pivot, and elements larger than the pivot. It recursively applies quick sort to the left and right parts and combines them with the middle part. Calling 'quick_sort(arr)' will sort the array [4, 2, 6, 1, 3] using the quick sort algorithm and return the sorted array [1, 2, 3, 4, 6].",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def fibonacci(n):\n if n <= 1:\n return n\n else:\n return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(6))",
    "output": "8",
    "description": "The code snippet defines a recursive function 'fibonacci' that calculates the nth Fibonacci number. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two previous numbers. The function uses recursion to calculate the Fibonacci number by summing the (n-1)th and (n-2)th Fibonacci numbers. Calling 'fibonacci(6)' will calculate the 6th Fibonacci number, which is 8.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def binary_to_decimal(binary):\n decimal = 0\n power = 0\n\n while binary > 0:\n last_digit = binary % 10\n decimal += last_digit * (2 ** power)\n binary //= 10\n power += 1\n\n return decimal\n\nbinary = 1010\nprint(binary_to_decimal(binary))",
    "output": "10",
    "description": "The code snippet defines a function 'binary_to_decimal' that converts a binary number to its decimal equivalent. The function iterates over each digit of the binary number from right to left. For each digit, it multiplies it by the corresponding power of 2 and adds it to the decimal variable. Finally, it returns the decimal equivalent. Calling 'binary_to_decimal(1010)' will convert the binary number 1010 to its decimal equivalent, which is 10.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def gcd(a, b):\n if b == 0:\n return a\n else:\n return gcd(b, a % b)\n\nprint(gcd(24, 36))",
    "output": "12",
    "description": "The code snippet defines a recursive function 'gcd' that calculates the greatest common divisor (GCD) of two numbers using Euclid's algorithm. The function takes two numbers 'a' and 'b' as parameters. If 'b' is 0, it returns 'a' as the GCD. Otherwise, it recursively calls 'gcd' with 'b' and 'a % b' as the new parameters. Calling 'gcd(24, 36)' will calculate the GCD of 24 and 36, which is 12.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def is_palindrome(word):\n if len(word) <= 1:\n return True\n else:\n return word[0] == word[-1] and is_palindrome(word[1:-1])\n\nprint(is_palindrome('radar'))",
    "output": "True",
    "description": "The code snippet defines a recursive function 'is_palindrome' that checks whether a word is a palindrome. The function compares the first and last characters of the word. If they are equal, it recursively calls 'is_palindrome' with the word excluding the first and last characters. The recursion continues until the word becomes empty or has only one character. If all comparisons are equal, the function returns True; otherwise, it returns False. Calling 'is_palindrome('radar')' will check whether the word 'radar' is a palindrome and return True.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def power(base, exponent):\n if exponent == 0:\n return 1\n else:\n return base * power(base, exponent - 1)\n\nprint(power(2, 3))",
    "output": "8",
    "description": "The code snippet defines a recursive function 'power' that calculates the power of a base raised to an exponent. The function uses recursion to multiply the base by itself 'exponent' times. When the exponent reaches 0 (base case), the function returns 1. Calling 'power(2, 3)' will calculate 2 raised to the power of 3, which is 8.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)\n\nprint(factorial(5))",
    "output": "120",
    "description": "The code snippet defines a recursive function 'factorial' that calculates the factorial of a given number 'n'. When 'n' is 0, the function returns 1 (base case). Otherwise, it multiplies 'n' with the factorial of 'n-1' and returns the result. Calling 'factorial(5)' will calculate the factorial of 5, which is 120.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def binary_search(arr, target):\n low = 0\n high = len(arr) - 1\n\n while low <= high:\n mid = (low + high) // 2\n\n if arr[mid] == target:\n return mid\n elif arr[mid] < target:\n low = mid + 1\n else:\n high = mid - 1\n\n return -1\n\narr = [1, 3, 5, 7, 9]\ntarget = 5\nprint(binary_search(arr, target))",
    "output": "2",
    "description": "The code snippet defines a binary search function 'binary_search' that searches for a target element in a sorted array. The function initializes two pointers, 'low' and 'high', to the start and end indices of the array respectively. It iteratively divides the search space in half by comparing the middle element with the target. If the middle element matches the target, the function returns its index. If the middle element is smaller than the target, the 'low' pointer is updated to the next element. If the middle element is larger than the target, the 'high' pointer is updated to the previous element. The process continues until the target is found or the search space is exhausted. Calling 'binary_search(arr, target)' will search for the target element 5 in the array [1, 3, 5, 7, 9] and return its index, which is 2.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def bubble_sort(arr):\n n = len(arr)\n\n for i in range(n):\n for j in range(0, n-i-1):\n if arr[j] > arr[j+1]:\n arr[j], arr[j+1] = arr[j+1], arr[j]\n\n return arr\n\narr = [4, 2, 7, 1, 5]\nprint(bubble_sort(arr))",
    "output": "[1, 2, 4, 5, 7]",
    "description": "The code snippet defines a bubble sort function 'bubble_sort' that sorts an array in ascending order. The function iterates over the array multiple times, comparing adjacent elements and swapping them if they are in the wrong order. This process continues until the array is fully sorted. Calling 'bubble_sort(arr)' will sort the array [4, 2, 7, 1, 5] using the bubble sort algorithm and return the sorted array [1, 2, 4, 5, 7].",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def linear_search(arr, target):\n n = len(arr)\n\n for i in range(n):\n if arr[i] == target:\n return i\n\n return -1\n\narr = [3, 5, 2, 8, 4]\ntarget = 8\nprint(linear_search(arr, target))",
    "output": "3",
    "description": "The code snippet defines a linear search function 'linear_search' that searches for a target element in an array. The function iterates over each element of the array and checks if it matches the target. If a match is found, the function returns the index of the element. If no match is found, the function returns -1. Calling 'linear_search(arr, target)' will search for the target element 8 in the array [3, 5, 2, 8, 4] and return its index, which is 3.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def selection_sort(arr):\n n = len(arr)\n\n for i in range(n):\n min_index = i\n for j in range(i+1, n):\n if arr[j] < arr[min_index]:\n min_index = j\n\n arr[i], arr[min_index] = arr[min_index], arr[i]\n\n return arr\n\narr = [5, 2, 1, 8, 4]\nprint(selection_sort(arr))",
    "output": "[1, 2, 4, 5, 8]",
    "description": "The code snippet defines a selection sort function 'selection_sort' that sorts an array in ascending order. The function iterates over the array and finds the minimum element in the remaining unsorted portion of the array. It then swaps the minimum element with the first unsorted element. This process continues until the entire array is sorted. Calling 'selection_sort(arr)' will sort the array [5, 2, 1, 8, 4] using the selection sort algorithm and return the sorted array [1, 2, 4, 5, 8].",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def merge_sort(arr):\n if len(arr) <= 1:\n return arr\n\n mid = len(arr) // 2\n left = merge_sort(arr[:mid])\n right = merge_sort(arr[mid:])\n\n return merge(left, right)\n\n\ndef merge(left, right):\n result = []\n i = j = 0\n\n while i < len(left) and j < len(right):\n if left[i] < right[j]:\n result.append(left[i])\n i += 1\n else:\n result.append(right[j])\n j += 1\n\n result.extend(left[i:])\n result.extend(right[j:])\n\n return result\n\narr = [7, 2, 4, 1, 5]\nprint(merge_sort(arr))",
    "output": "[1, 2, 4, 5, 7]",
    "description": "The code snippet defines a merge sort function 'merge_sort' that sorts an array in ascending order. The function uses the divide and conquer approach by recursively dividing the array into smaller subarrays until each subarray has only one element. Then, it merges the subarrays in a sorted manner using the 'merge' function. Calling 'merge_sort(arr)' will sort the array [7, 2, 4, 1, 5] using the merge sort algorithm and return the sorted array [1, 2, 4, 5, 7].",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def insertion_sort(arr):\n n = len(arr)\n\n for i in range(1, n):\n key = arr[i]\n j = i - 1\n\n while j >= 0 and arr[j] > key:\n arr[j+1] = arr[j]\n j -= 1\n\n arr[j+1] = key\n\n return arr\n\narr = [3, 1, 5, 2, 4]\nprint(insertion_sort(arr))",
    "output": "[1, 2, 3, 4, 5]",
    "description": "The code snippet defines an insertion sort function 'insertion_sort' that sorts an array in ascending order. The function divides the array into a sorted and an unsorted part. It iteratively takes one element from the unsorted part and inserts it into its correct position in the sorted part. This process continues until the entire array is sorted. Calling 'insertion_sort(arr)' will sort the array [3, 1, 5, 2, 4] using the insertion sort algorithm and return the sorted array [1, 2, 3, 4, 5].",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def quick_sort(arr):\n if len(arr) <= 1:\n return arr\n\n pivot = arr[len(arr) // 2]\n left = [x for x in arr if x < pivot]\n middle = [x for x in arr if x == pivot]\n right = [x for x in arr if x > pivot]\n\n return quick_sort(left) + middle + quick_sort(right)\n\narr = [4, 2, 6, 1, 3]\nprint(quick_sort(arr))",
    "output": "[1, 2, 3, 4, 6]",
    "description": "The code snippet defines a quick sort function 'quick_sort' that sorts an array in ascending order. The function selects a pivot element and divides the array into three parts: elements smaller than the pivot, elements equal to the pivot, and elements larger than the pivot. It recursively applies quick sort to the left and right parts and combines them with the middle part. Calling 'quick_sort(arr)' will sort the array [4, 2, 6, 1, 3] using the quick sort algorithm and return the sorted array [1, 2, 3, 4, 6].",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def fibonacci(n):\n if n <= 1:\n return n\n else:\n return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(6))",
    "output": "8",
    "description": "The code snippet defines a recursive function 'fibonacci' that calculates the nth Fibonacci number. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two previous numbers. The function uses recursion to calculate the Fibonacci number by summing the (n-1)th and (n-2)th Fibonacci numbers. Calling 'fibonacci(6)' will calculate the 6th Fibonacci number, which is 8.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def binary_to_decimal(binary):\n decimal = 0\n power = 0\n\n while binary > 0:\n last_digit = binary % 10\n decimal += last_digit * (2 ** power)\n binary //= 10\n power += 1\n\n return decimal\n\nbinary = 1010\nprint(binary_to_decimal(binary))",
    "output": "10",
    "description": "The code snippet defines a function 'binary_to_decimal' that converts a binary number to its decimal equivalent. The function iterates over each digit of the binary number from right to left. For each digit, it multiplies it by the corresponding power of 2 and adds it to the decimal variable. Finally, it returns the decimal equivalent. Calling 'binary_to_decimal(1010)' will convert the binary number 1010 to its decimal equivalent, which is 10.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def gcd(a, b):\n if b == 0:\n return a\n else:\n return gcd(b, a % b)\n\nprint(gcd(24, 36))",
    "output": "12",
    "description": "The code snippet defines a recursive function 'gcd' that calculates the greatest common divisor (GCD) of two numbers using Euclid's algorithm. The function takes two numbers 'a' and 'b' as parameters. If 'b' is 0, it returns 'a' as the GCD. Otherwise, it recursively calls 'gcd' with 'b' and 'a % b' as the new parameters. Calling 'gcd(24, 36)' will calculate the GCD of 24 and 36, which is 12.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def is_palindrome(word):\n if len(word) <= 1:\n return True\n else:\n return word[0] == word[-1] and is_palindrome(word[1:-1])\n\nprint(is_palindrome('radar'))",
    "output": "True",
    "description": "The code snippet defines a recursive function 'is_palindrome' that checks whether a word is a palindrome. The function compares the first and last characters of the word. If they are equal, it recursively calls 'is_palindrome' with the word excluding the first and last characters. The recursion continues until the word becomes empty or has only one character. If all comparisons are equal, the function returns True; otherwise, it returns False. Calling 'is_palindrome('radar')' will check whether the word 'radar' is a palindrome and return True.",
    "level": "Beginner"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "def power(base, exponent):\n if exponent == 0:\n return 1\n else:\n return base * power(base, exponent - 1)\n\nprint(power(2, 3))",
    "output": "8",
    "description": "The code snippet defines a recursive function 'power' that calculates the power of a base raised to an exponent. The function uses recursion to multiply the base by itself 'exponent' times. When the exponent reaches 0 (base case), the function returns 1. Calling 'power(2, 3)' will calculate 2 raised to the power of 3, which is 8.",
    "level": "Beginner"
    },
        {
        "question": "What will be the output of the following code?",
        "codeSnippet": "def bubble_sort(arr):\n n = len(arr)\n\n for i in range(n):\n swapped = False\n\n for j in range(0, n-i-1):\n if arr[j] > arr[j+1]:\n arr[j], arr[j+1] = arr[j+1], arr[j]\n swapped = True\n\n if not swapped:\n break\n\n return arr\n\narr = [4, 2, 1, 5, 3]\nprint(bubble_sort(arr))",
        "output": "[1, 2, 3, 4, 5]",
        "description": "The code snippet defines a bubble sort function 'bubble_sort' that sorts an array in ascending order. The function iteratively compares adjacent elements and swaps them if they are in the wrong order. This process is repeated until the array is fully sorted. Calling 'bubble_sort(arr)' will sort the array [4, 2, 1, 5, 3] using the bubble sort algorithm and return the sorted array [1, 2, 3, 4, 5].",
        "level": "Medium"
        },
        {
        "question": "What will be the output of the following code?",
        "codeSnippet": "def selection_sort(arr):\n n = len(arr)\n\n for i in range(n):\n min_idx = i\n\n for j in range(i+1, n):\n if arr[j] < arr[min_idx]:\n min_idx = j\n\n arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\n return arr\n\narr = [4, 2, 1, 5, 3]\nprint(selection_sort(arr))",
        "output": "[1, 2, 3, 4, 5]",
        "description": "The code snippet defines a selection sort function 'selection_sort' that sorts an array in ascending order. The function iteratively selects the minimum element from the unsorted part of the array and swaps it with the element at the current position. This process is repeated until the array is fully sorted. Calling 'selection_sort(arr)' will sort the array [4, 2, 1, 5, 3] using the selection sort algorithm and return the sorted array [1, 2, 3, 4, 5].",
        "level": "Medium"
        },
        {
        "question": "What will be the output of the following code?",
        "codeSnippet": "def linear_search(arr, target):\n n = len(arr)\n\n for i in range(n):\n if arr[i] == target:\n return i\n\n return -1\n\narr = [4, 2, 1, 5, 3]\ntarget = 5\nprint(linear_search(arr, target))",
        "output": "3",
        "description": "The code snippet defines a linear search function 'linear_search' that searches for a target element in an array. The function iteratively checks each element of the array and returns the index of the target element if found. If the target element is not found, it returns -1. Calling 'linear_search(arr, target)' will search for the element 5 in the array [4, 2, 1, 5, 3] using linear search and return the index 3.",
        "level": "Medium"
        },
        {
        "question": "What will be the output of the following code?",
        "codeSnippet": "def binary_search(arr, target):\n low = 0\n high = len(arr) - 1\n\n while low <= high:\n mid = (low + high) // 2\n\n if arr[mid] == target:\n return mid\n elif arr[mid] < target:\n low = mid + 1\n else:\n high = mid - 1\n\n return -1\n\narr = [1, 2, 3, 4, 5]\ntarget = 3\nprint(binary_search(arr, target))",
        "output": "2",
        "description": "The code snippet defines a binary search function 'binary_search' that searches for a target element in a sorted array. The function repeatedly divides the search space in half by comparing the target with the middle element. If the target is found, it returns the index of the target element. If the target is less than the middle element, the search continues in the lower half; otherwise, it continues in the upper half. If the target is not found, the function returns -1. Calling 'binary_search(arr, target)' will search for the element 3 in the sorted array [1, 2, 3, 4, 5] using binary search and return the index 2.",
        "level": "Medium"
        },
        {
        "question": "What will be the output of the following code?",
        "codeSnippet": "def merge_sort(arr):\n if len(arr) <= 1:\n return arr\n\n mid = len(arr) // 2\n left = merge_sort(arr[:mid])\n right = merge_sort(arr[mid:])\n\n return merge(left, right)\n\n\ndef merge(left, right):\n result = []\n i = j = 0\n\n while i < len(left) and j < len(right):\n if left[i] < right[j]:\n result.append(left[i])\n i += 1\n else:\n result.append(right[j])\n j += 1\n\n result.extend(left[i:])\n result.extend(right[j:])\n\n return result\n\narr = [7, 2, 4, 1, 5]\nprint(merge_sort(arr))",
        "output": "[1, 2, 4, 5, 7]",
        "description": "The code snippet defines a merge sort function 'merge_sort' that sorts an array in ascending order. The function uses the divide and conquer approach by recursively dividing the array into smaller subarrays until each subarray has only one element. Then, it merges the subarrays in a sorted manner using the 'merge' function. Calling 'merge_sort(arr)' will sort the array [7, 2, 4, 1, 5] using the merge sort algorithm and return the sorted array [1, 2, 4, 5, 7].",
        "level": "Hard"
        },
        {
        "question": "What will be the output of the following code?",
        "codeSnippet": "def quick_sort(arr):\n if len(arr) <= 1:\n return arr\n\n pivot = arr[len(arr) // 2]\n left = [x for x in arr if x < pivot]\n middle = [x for x in arr if x == pivot]\n right = [x for x in arr if x > pivot]\n\n return quick_sort(left) + middle + quick_sort(right)\n\narr = [3, 1, 7, 2, 5]\nprint(quick_sort(arr))",
        "output": "[1, 2, 3, 5, 7]",
        "description": "The code snippet defines a quick sort function 'quick_sort' that sorts an array in ascending order. The function selects a pivot element (in this case, the middle element) and partitions the array into three subarrays: elements less than the pivot, elements equal to the pivot, and elements greater than the pivot. It recursively applies quick sort to the subarrays and combines the sorted subarrays to obtain the final sorted array. Calling 'quick_sort(arr)' will sort the array [3, 1, 7, 2, 5] using the quick sort algorithm and return the sorted array [1, 2, 3, 5, 7].",
        "level": "Hard"
        },
        {
        "question": "What will be the output of the following code?",
        "codeSnippet": "def heapify(arr, n, i):\n largest = i\n left = 2 * i + 1\n right = 2 * i + 2\n\n if left < n and arr[left] > arr[largest]:\n largest = left\n\n if right < n and arr[right] > arr[largest]:\n largest = right\n\n if largest != i:\n arr[i], arr[largest] = arr[largest], arr[i]\n heapify(arr, n, largest)\n\n\ndef heap_sort(arr):\n n = len(arr)\n\n for i in range(n // 2 - 1, -1, -1):\n heapify(arr, n, i)\n\n for i in range(n - 1, 0, -1):\n arr[i], arr[0] = arr[0], arr[i]\n heapify(arr, i, 0)\n\n return arr\n\narr = [4, 2, 1, 5, 3]\nprint(heap_sort(arr))",
        "output": "[1, 2, 3, 4, 5]",
        "description": "The code snippet defines a heap sort function 'heap_sort' that sorts an array in ascending order. The function first builds a max heap using the 'heapify' function. Then, it repeatedly extracts the maximum element from the heap and places it at the end of the array. This process is repeated until the array is fully sorted. Calling 'heap_sort(arr)' will sort the array [4, 2, 1, 5, 3] using the heap sort algorithm and return the sorted array [1, 2, 3, 4, 5].",
        "level": "Hard"
        },
        {
        "question": "What will be the output of the following code?",
        "codeSnippet": "def counting_sort(arr):\n max_value = max(arr)\n count = [0] * (max_value + 1)\n sorted_arr = [0] * len(arr)\n\n for num in arr:\n count[num] += 1\n\n for i in range(1, max_value + 1):\n count[i] += count[i - 1]\n\n for num in arr:\n sorted_arr[count[num] - 1] = num\n count[num] -= 1\n\n return sorted_arr\n\narr = [4, 2, 1, 5, 3]\nprint(counting_sort(arr))",
        "output": "[1, 2, 3, 4, 5]",
        "description": "The code snippet defines a counting sort function 'counting_sort' that sorts an array in ascending order. The function first determines the maximum value in the array to create a count array of appropriate size. Then, it counts the occurrences of each element in the array and calculates the cumulative counts. Finally, it places each element in the sorted order based on the count array. Calling 'counting_sort(arr)' will sort the array [4, 2, 1, 5, 3] using the counting sort algorithm and return the sorted array [1, 2, 3, 4, 5].",
        "level": "Hard"
        },
        {
        "question": "What will be the output of the following code?",
        "codeSnippet": "def topological_sort(graph):\n visited = set()\n stack = []\n\n def dfs(node):\n visited.add(node)\n\n for neighbor in graph[node]:\n if neighbor not in visited:\n dfs(neighbor)\n\n stack.append(node)\n\n for node in graph:\n if node not in visited:\n dfs(node)\n\n return stack[::-1]\n\ngraph = {\n 'A': ['C', 'D'],\n 'B': ['D', 'E'],\n 'C': ['F'],\n 'D': ['E', 'F'],\n 'E': ['F'],\n 'F': []\n}\n\nprint(topological_sort(graph))",
        "output": "['A', 'B', 'D', 'E', 'C', 'F']",
        "description": "The code snippet defines a topological sort function 'topological_sort' that performs a topological sorting of a directed acyclic graph (DAG). The function uses depth-first search (DFS) to visit all nodes of the graph and adds them to a stack in the order of their finishing times. The resulting stack represents a valid topological ordering of the graph. Calling 'topological_sort(graph)' will perform a topological sort on the given graph and return the sorted order ['A', 'B', 'D', 'E', 'C', 'F'].",
        "level": "Hard"
        },
        {
        "question": "What will be the output of the following code?",
        "codeSnippet": "def knapsack(weights, values, capacity):\n n = len(weights)\n dp = [[0] * (capacity + 1) for _ in range(n + 1)]\n\n for i in range(1, n + 1):\n for j in range(1, capacity + 1):\n if weights[i - 1] <= j:\n dp[i][j] = max(values[i - 1] + dp[i - 1][j - weights[i - 1]], dp[i - 1][j])\n else:\n dp[i][j] = dp[i - 1][j]\n\n return dp[n][capacity]\n\nweights = [1, 3, 4, 5]\nvalues = [1, 4, 5, 7]\ncapacity = 7\nprint(knapsack(weights, values, capacity))",
        "output": "9",
        "description": "The code snippet defines a knapsack function 'knapsack' that solves the 0/1 Knapsack problem using dynamic programming. The function takes as input the weights and values of items, along with the capacity of the knapsack. It returns the maximum value that can be obtained by selecting a subset of items without exceeding the knapsack's capacity. Calling 'knapsack(weights, values, capacity)' will solve the 0/1 Knapsack problem for the given weights [1, 3, 4, 5], values [1, 4, 5, 7], and capacity 7, and return the maximum value 9.",
        "level": "Hard"
        },
        {
        "question": "What will be the output of the following code?",
        "codeSnippet": "def rod_cutting(lengths, prices, rod_length):\n n = len(lengths)\n dp = [[0] * (rod_length + 1) for _ in range(n + 1)]\n\n for i in range(1, n + 1):\n for j in range(1, rod_length + 1):\n if lengths[i - 1] <= j:\n dp[i][j] = max(prices[i - 1] + dp[i][j - lengths[i - 1]], dp[i - 1][j])\n else:\n dp[i][j] = dp[i - 1][j]\n\n return dp[n][rod_length]\n\nlengths = [1, 2, 3, 4, 5]\nprices = [2, 5, 7, 8, 9]\nrod_length = 5\nprint(rod_cutting(lengths, prices, rod_length))",
        "output": "10",
        "description": "The code snippet defines a rod cutting function 'rod_cutting' that solves the rod cutting problem using dynamic programming. The function takes as input the lengths and prices of different rod pieces, along with the desired length of the rod to be cut. It returns the maximum price that can be obtained by cutting the rod into pieces of given lengths and selling them. Calling 'rod_cutting(lengths, prices, rod_length)' will solve the rod cutting problem for the given lengths [1, 2, 3, 4, 5], prices [2, 5, 7, 8, 9], and rod length 5, and return the maximum price 10.",
        "level": "Hard"
        }
        ]
        
    