[
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nint main() {\n int x = 10;\n int y = 20;\n printf('%d', x + y);\n return 0;\n}",
    "output": "30",
    "description": "The code snippet declares two integer variables 'x' and 'y' with values 10 and 20 respectively. The 'printf' statement adds 'x' and 'y' together and prints the result, which is 30.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nint main() {\n int a = 5;\n int b = 3;\n int result = a / b;\n printf('%d', result);\n return 0;\n}",
    "output": "1",
    "description": "The code snippet declares two integer variables 'a' and 'b' with values 5 and 3 respectively. The 'result' variable is assigned the result of dividing 'a' by 'b', which is integer division. Since both 'a' and 'b' are integers, the result will be the quotient without the fractional part, which is 1.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nint main() {\n int arr[] = {1, 2, 3, 4, 5};\n printf('%d', sizeof(arr) / sizeof(arr[0]));\n return 0;\n}",
    "output": "5",
    "description": "The code snippet declares an integer array 'arr' with 5 elements. The 'sizeof(arr)' returns the total size in bytes of the array, and 'sizeof(arr[0])' returns the size in bytes of a single element in the array. Dividing the total size of the array by the size of a single element gives the number of elements in the array, which is 5.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nvoid foo(int n) {\n if (n > 0) {\n foo(n - 1);\n printf('%d ', n);\n }\n}\n\nint main() {\n foo(5);\n return 0;\n}",
    "output": "1 2 3 4 5",
    "description": "The code snippet defines a recursive function 'foo' that takes an integer 'n' as a parameter. The function recursively calls itself with 'n' decremented by 1 until 'n' becomes 0. During each recursive call, the value of 'n' is printed. Therefore, calling 'foo(5)' will print the numbers from 1 to 5 in ascending order.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nint sum(int n) {\n if (n == 0) {\n return 0;\n }\n return n + sum(n - 1);\n}\n\nint main() {\n printf('%d', sum(5));\n return 0;\n}",
    "output": "15",
    "description": "The code snippet defines a recursive function 'sum' that takes an integer 'n' as a parameter. The function calculates the sum of all numbers from 'n' to 1 using recursion. When 'n' becomes 0, the function returns 0. Otherwise, it adds 'n' to the sum of the numbers from 'n-1' and returns the result. Therefore, calling 'sum(5)' will calculate the sum 5 + 4 + 3 + 2 + 1, which is 15.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nint factorial(int n) {\n if (n == 0) {\n return 1;\n }\n return n * factorial(n - 1);\n}\n\nint main() {\n printf('%d', factorial(5));\n return 0;\n}",
    "output": "120",
    "description": "The code snippet defines a recursive function 'factorial' that calculates the factorial of a given integer 'n'. When 'n' becomes 0, the function returns 1 (base case). Otherwise, it multiplies 'n' with the factorial of 'n-1' and returns the result. Calling 'factorial(5)' will calculate 5! (5 factorial), which is 5 * 4 * 3 * 2 * 1 = 120.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nint fib(int n) {\n if (n <= 1) {\n return n;\n }\n return fib(n - 1) + fib(n - 2);\n}\n\nint main() {\n printf('%d', fib(7));\n return 0;\n}",
    "output": "13",
    "description": "The code snippet defines a recursive function 'fib' that calculates the Fibonacci number at a given position 'n'. When 'n' is 0 or 1, the function returns 'n' (base cases). Otherwise, it recursively calls itself with 'n-1' and 'n-2' and adds the results. Calling 'fib(7)' will calculate the 7th Fibonacci number, which is 13.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nint gcd(int a, int b) {\n if (b == 0) {\n return a;\n }\n return gcd(b, a % b);\n}\n\nint main() {\n printf('%d', gcd(24, 36));\n return 0;\n}",
    "output": "12",
    "description": "The code snippet defines a recursive function 'gcd' that calculates the greatest common divisor (GCD) of two integers 'a' and 'b'. The function uses Euclid's algorithm, which states that the GCD of 'a' and 'b' is equal to the GCD of 'b' and 'a mod b'. When 'b' becomes 0, the function returns 'a'. Therefore, calling 'gcd(24, 36)' will calculate the GCD, which is 12.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nvoid swap(int* a, int* b) {\n int temp = *a;\n *a = *b;\n *b = temp;\n}\n\nint main() {\n int x = 10;\n int y = 20;\n swap(&x, &y);\n printf('%d %d', x, y);\n return 0;\n}",
    "output": "20 10",
    "description": "The code snippet defines a function 'swap' that swaps the values of two integers using pointers. In the 'main' function, two integer variables 'x' and 'y' are declared with values 10 and 20 respectively. The 'swap' function is called with the addresses of 'x' and 'y', which exchanges their values. Therefore, after swapping, 'x' becomes 20 and 'y' becomes 10.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nvoid printArray(int arr[], int size) {\n for (int i = 0; i < size; i++) {\n printf('%d ', arr[i]);\n }\n}\n\nint main() {\n int arr[] = {4, 2, 6, 8, 1};\n printArray(arr, sizeof(arr) / sizeof(arr[0]));\n return 0;\n}",
    "output": "4 2 6 8 1",
    "description": "The code snippet defines a function 'printArray' that takes an integer array 'arr' and its size as parameters. The function iterates over the elements of the array using a 'for' loop and prints each element. In the 'main' function, an integer array 'arr' is declared with values 4, 2, 6, 8, and 1. The 'printArray' function is called with 'arr' and the size of the array. Therefore, the output will be '4 2 6 8 1'.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nint max(int a, int b) {\n return (a > b) ? a : b;\n}\n\nint main() {\n int x = 5;\n int y = 3;\n int z = max(x, y);\n printf('%d', z);\n return 0;\n}",
    "output": "5",
    "description": "The code snippet defines a function 'max' that takes two integers 'a' and 'b' as parameters and returns the maximum of the two using the ternary operator. In the 'main' function, two integer variables 'x' and 'y' are declared with values 5 and 3 respectively. The 'max' function is called with 'x' and 'y', and the returned value is assigned to 'z'. Therefore, 'z' will contain the maximum value, which is 5.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nvoid printPattern(int n) {\n if (n > 0) {\n printPattern(n - 1);\n printf('%d ', n);\n printPattern(n - 1);\n }\n}\n\nint main() {\n printPattern(3);\n return 0;\n}",
    "output": "1 2 1 3 1 2 1",
    "description": "The code snippet defines a recursive function 'printPattern' that takes an integer 'n' as a parameter. The function first calls itself with 'n-1' and then prints 'n' followed by another recursive call with 'n-1'. The function repeats this pattern until 'n' becomes 0. Therefore, calling 'printPattern(3)' will print the pattern '1 2 1 3 1 2 1'.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nvoid printEvenNumbers(int n) {\n if (n > 0) {\n printEvenNumbers(n - 1);\n if (n % 2 == 0) {\n printf('%d ', n);\n }\n }\n}\n\nint main() {\n printEvenNumbers(10);\n return 0;\n}",
    "output": "10 8 6 4 2",
    "description": "The code snippet defines a recursive function 'printEvenNumbers' that takes an integer 'n' as a parameter. The function first calls itself with 'n-1' and then checks if 'n' is divisible by 2 (even). If 'n' is even, it prints 'n'. The function repeats this process until 'n' becomes 0. Therefore, calling 'printEvenNumbers(10)' will print the even numbers from 10 to 2 in descending order.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nint power(int base, int exponent) {\n if (exponent == 0) {\n return 1;\n }\n return base * power(base, exponent - 1);\n}\n\nint main() {\n printf('%d', power(2, 4));\n return 0;\n}",
    "output": "16",
    "description": "The code snippet defines a recursive function 'power' that calculates the power of a base number to a given exponent. When the exponent becomes 0, the function returns 1 (base case). Otherwise, it multiplies the base with 'power(base, exponent - 1)' and returns the result. Calling 'power(2, 4)' will calculate 2 raised to the power of 4, which is 16.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nvoid printOddNumbers(int n) {\n if (n > 0) {\n if (n % 2 == 1) {\n printf('%d ', n);\n }\n printOddNumbers(n - 1);\n }\n}\n\nint main() {\n printOddNumbers(10);\n return 0;\n}",
    "output": "9 7 5 3 1",
    "description": "The code snippet defines a recursive function 'printOddNumbers' that takes an integer 'n' as a parameter. The function first checks if 'n' is odd. If 'n' is odd, it prints 'n'. Then, it calls itself with 'n-1'. The function repeats this process until 'n' becomes 0. Therefore, calling 'printOddNumbers(10)' will print the odd numbers from 9 to 1 in descending order.",
    "level": "Hard"
    },
    {
    "question": "What will be the output of the following code?",
    "codeSnippet": "#include<stdio.h>\n\nint multiply(int a, int b) {\n if (b == 0) {\n return 0;\n }\n return a + multiply(a, b - 1);\n}\n\nint main() {\n printf('%d', multiply(3, 4));\n return 0;\n}",
    "output": "12",
    "description": "The code snippet defines a recursive function 'multiply' that multiplies two integers 'a' and 'b' using repeated addition. When 'b' becomes 0, the function returns 0 (base case). Otherwise, it adds 'a' to the result of 'multiply(a, b - 1)' and returns the sum. Calling 'multiply(3, 4)' will calculate 3 multiplied by 4, which is 12.",
    "level": "Hard"
    }
    ]

    
    
    
    
    
    
    